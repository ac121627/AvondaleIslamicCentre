@using AvondaleIslamicCentre.Models
@model PaginatedList<Notice>

@{
    ViewData["Title"] = "Index";
    var currentSort = (string)ViewData["CurrentSort"] ?? "";
    var currentFilter = (string)ViewData["CurrentFilter"] ?? "";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1 class="page-title">Notices</h1>
        <small class="page-subtitle">Latest announcements</small>
    </div>
    <div class="d-flex align-items-center">
        <form method="get" class="search-wrapper mb-0">
            <div class="input-group search-input">
                <input type="text" name="searchString" value="@currentFilter" placeholder="Search notices..." class="form-control" />
                <input type="hidden" name="sortOrder" value="@currentSort" />
                <button class="btn btn-secondary search-btn" type="submit"><i class="bi bi-search"></i>Search</button>
            </div>
        </form>
        @if (User.IsInRole("Admin"))
        {
            <a asp-action="Create" class="btn btn-create ms-3">Make A New Notice</a>
        }
    </div>
</div>

@if (Model.Count > 0)
{
    <table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Message)
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@(ViewData["DateSortParm"])" asp-route-searchString="@currentFilter">@Html.DisplayNameFor(model => model[0].PostedAt)</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Message)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PostedAt)
            </td>
            <td>
                @if (User.IsInRole("Admin"))
                {
                    <a asp-action="Edit" asp-route-id="@item.NoticeId" class="btn btn-edit btn-sm">Edit</a>
                    <a asp-action="Details" asp-route-id="@item.NoticeId" class="btn btn-details btn-sm ms-1">Details</a>
                    <a asp-action="Delete" asp-route-id="@item.NoticeId" class="btn btn-delete btn-sm ms-1">Delete</a>
                }
                else
                {
                    <a asp-action="Details" asp-route-id="@item.NoticeId" class="btn btn-details btn-sm">Details</a>
                }
            </td>
        </tr>
}
    </tbody>
    </table>

    <nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-sortOrder="@currentSort" asp-route-searchString="@currentFilter">Previous</a>
        </li>
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-sortOrder="@currentSort" asp-route-searchString="@currentFilter">@i</a>
            </li>
        }
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-sortOrder="@currentSort" asp-route-searchString="@currentFilter">Next</a>
        </li>
        </ul>
    </nav>
}
else
{
    if (!String.IsNullOrEmpty(currentFilter))
    {
        <div class="alert alert-warning"><i class="bi bi-search me-2"></i>We couldn’t find anything matching your search. Try using different words or check your spelling.</div>
    }
    else
    {
        <div class="alert alert-light"><i class="bi bi-info-circle me-2"></i>No notices found.</div>
    }
}
